name: Build for macOS

on:
  push:
  pull_request:
  release:
    types: [published]

# TODO NTS plan currectly is:
#   [x86_64]  [arm64]  [universal]
#       \       |       /
#        \      |      /
#         [build bundle]
#               |
#         [tar & upload]
#      (maybe create a dmg)
# xref: https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary
#       https://github.com/dosbox-staging/dosbox-staging/blob/master/.github/workflows/macos.yml
#       https://github.com/create-dmg/create-dmg (brew install create-dmg)
#       old versions of this file
# remember to touch other workflows

jobs:

  build:
    name: Build
    
    # TODO: get to use 11 so we can ACTUALLY compile for arm64
    # https://github.com/actions/virtual-environments/blob/main/docs/macos-11-onboarding.md
    runs-on: macos-latest
    strategy:
      matrix:
        variant: ["", "-sdl2"]
        arch: [x86_64, arm64, universal]
    steps:
      - name: Hax before 11
        run: |
          # Hack macOS 10.x to allow arm64* build support
          if [ "$(sw_vers -productVersion | cut -d'.' -f1)" = 10 ]; then
            pushd /Library/Developer/CommandLineTools/SDKs
            sudo rm MacOSX.sdk
            # XXX: check if it's MacOSX11.4.sdk by now
            sudo ln -s MacOSX11.4.sdk MacOSX.sdk
            sudo rm -rf MacOSX10.15.sdk
            ls -l
            popd
          fi
    
      - name: Checkout repo
        uses: actions/checkout@v2
        
      - name: Prepare brew caches
        id: prep-caches
        run: |
          set -eu
          BREW_DIR="$(brew --cache)"
          DISCARD_DIR="${{ github.workspace }}/discard"
          mkdir -p "$DISCARD_DIR"
          mv -f "$BREW_DIR"/* "$DISCARD_DIR"
          echo "::set-output name=brew_dir::$BREW_DIR"
          echo "::set-output name=today::$(date +%F)"
      - uses:  actions/cache@v2
        with:
          path: ${{ steps.prep-caches.outputs.brew_dir }}
          key:  brew-cache-${{ steps.prep-caches.outputs.today }}-${{ matrix.variant }}${{ matrix.arch }}
          restore-keys: brew-cache--
      - name: Install dependencies
        run: brew install autoconf automake libtool ncurses nasm freetype fluid-synth libslirp pkg-config
        
      - name: Build
        if: matrix.arch != 'universal'
        env:
          RUN_NSUFF: ${{ matrix.variant }}
          TARGET_ARCH: ${{ matrix.arch }}
        run: |
          x=x86_64-apple-macos10.12
          if [ $TARGET_ARCH = "arm64" ]; then
            x="arm64-apple-macos11"
          fi
          CFLAGS+=" -target $x -arch $TARGET_ARCH"
          CXXFLAGS+=" -target $x -arch $TARGET_ARCH"
          chmod +x build-macosx$RUN_NSUFF
          ./build-macosx$RUN_NSUFF CFLAGS=$CFLAGS CXXFLAGS=$CXXFLAGS
      - name: Build (universal)
        if: matrix.arch == 'universal'
        env:
          RUN_NSUFF: ${{ matrix.variant }}
        run: |
          OCFL=$CFLAGS
          OCXFL=$CXXFLAGS
          chmod +x build-macosx$RUN_NSUFF
          CFLAGS+=" -target x86_64-apple-macos10.12 -arch x86_64"
          CXXFLAGS+=" -target x86_64-apple-macos10.12 -arch x86_64"
          ./build-macosx$RUN_NSUFF CFLAGS=$CFLAGS CXXFLAGS=$CXXFLAGS
          CFLAGS=$OCFL
          CXXFLAGS=$OCXFL
          cp src/dosbox-x src/dosbox-x-1
          CFLAGS+=" -target arm64-apple-macos11 -arch arm64"
          CXXFLAGS+=" -target arm64-apple-macos11 -arch arm64"
          ./build-macosx$RUN_NSUFF CFLAGS=$CFLAGS CXXFLAGS=$CXXFLAGS
          cp src/dosbox-x src/dosbox-x-2
          lipo -create -output src/dosbox-x src/dosbox-x-1 src/dosbox-x-2
      - name: Check if arch correct [DEBUG]
        run: file -b src/dosbox-x
          
      # also tar it to keep permissions
      - name: Make app bundle
        run: |
          make dosbox-x.app
          tar -czf dosbox-x.app.tar.gz dosbox-x.app
      
      - name: Upload app bundle as a artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-${{ matrix.arch }}${{ matrix.variant }}
          path: dosbox-x.app.tar.gz
      - name: Upload app bundle to invoking Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} 
          asset_path: dosbox-x.app.tar.gz
          asset_name: dosbox-x-macosx-${{ matrix.arch }}${{ matrix.variant }}.tar.gz
          asset_content_type: application/gzip
