name: Build for Windows (or HX-DOS Extender)
on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  vsbuild:
    name: Build with Visual Studio
    runs-on: windows-latest # currently has Visual Studio 2019

    strategy:
      matrix:
        arch: [Win32, x64, ARM, ARM64]
        type: [Release, "Release SDL2"]

    steps:
      - uses: actions/checkout@v2
        name: Checkout repo
        
      - run: perl update-build-timestamp.pl
        name: Update build timestamp
        
      - uses: microsoft/setup-msbuild@c26a08ba26249b81327e26f6ef381897b6a8754d # commithash because 1.0.2
        name: Init MSBuild
        
      # DXSDK is included in WinSDK
      #- name: Install DirectX SDK
      #  working-directory: ${{ runner.temp }}
      #  run: |
      #    curl -O sdk.exe https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe#/Inst.exe
      #    ./sdk.exe /P "C:\dxsdk" /U /F /silent

      # FIXME: does not work
      - name: Cache IPDBs
        uses: actions/cache@v2
        with:
          key: vs-${{ matrix.arch }}-${{ matrix.type }}-buildcache
          path: |
            bin/${{ matrix.arch }}/${{ matrix.type }}/*.exp
            bin/${{ matrix.arch }}/${{ matrix.type }}/*.lib
            bin/${{ matrix.arch }}/${{ matrix.type }}/*.pdb
            vs2015/obj/**/${{ matrix.arch }}/Release/**/*.exp
            vs2015/obj/**/${{ matrix.arch }}/Release/**/*.lib
            vs2015/obj/**/${{ matrix.arch }}/Release/**/*.pdb
            
      - name: Build
        working-directory: vs2015
        env:
          GH_BUILD_TYPE: ${{ matrix.type }}
          GH_BUILD_ARCH: ${{ matrix.arch }}
        run: |
          msbuild dosbox-x.sln /p:Configuration=$env:GH_BUILD_TYPE /p:Platform=$env:GH_BUILD_ARCH
          cd "../bin/${{ matrix.arch }}/${{ matrix.type }}"
          
      - name: Internally decide artifact name
        id: zipname
        env:
          GH_BUILD_TYPE: ${{ matrix.type }}
          GH_BUILD_ARCH: ${{ matrix.arch }}
        run: |
          $zipname = $env:GH_BUILD_ARCH.ToLower()
          if ( $env:GH_BUILD_TYPE -eq "Release SDL2" )
          {
            $zipname = "$zipname-sdl2"
          }
          Write-Host "::set-output name=zipname-sub::$zipname"
          $zip = "dosbox-x-windows-vs-$zipname.zip"
          Write-Host "::set-output name=zipname::$zip"
      - name: Upload build as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: vs-${{ steps.zipname.outputs.zipname-sub }}
          path: |
            bin/${{ matrix.arch }}/${{ matrix.type }}
            !bin/${{ matrix.arch }}/${{ matrix.type }}/*.exp
            !bin/${{ matrix.arch }}/${{ matrix.type }}/*.lib
            !bin/${{ matrix.arch }}/${{ matrix.type }}/*.pdb
            
      - name: Generate zip if invoked by a Release
        if: github.event_name == 'release'
        run: |
          ./vs2015/tool/zip.exe -r -9 build.zip "bin/${{ matrix.arch }}/${{ matrix.type }}" -x "*/\.exp" -x "*/\.lib" -x "*/\.pdb"
      - name: Upload build to invoking Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} 
          asset_path: ./build.zip
          asset_name: ${{ steps.zipname.outputs.zipname }}
          asset_content_type: application/zip
  mingw:
    name: Build with MSYS2
    runs-on: windows-latest
    
    strategy:
      matrix:
        arch: [32, 64]
        type: ["", -sdl2, -lowend, -sdldraw]
      fail-fast: false
      
    defaults:
      run:
        shell: msys2 {0}
    env:
      # Which ffmpeg version to build for the workaround below
      # see ffmpeg/ffmpeg repo
      ffmpeg-release: 8d172d940946dce59841b1c95059f3b38f68ca61
      
    steps:
      - uses: msys2/setup-msys2@v2
        name: Setup MSYS2 [i686]
        if: matrix.arch == '32'
        with:
          MSYSTEM: MINGW${{ matrix.arch }}
          path-type: strict
          install: >-
            base-devel
            mingw-w64-i686-toolchain
            mingw-w64-i686-libpng
            mingw-w64-i686-fluidsynth
            mingw-w64-i686-ncurses
            mingw-w64-i686-SDL_net
            mingw-w64-i686-libslirp
            mingw-w64-i686-freetype
            mingw-w64-i686-nasm
      - uses: msys2/setup-msys2@v2
        name: Setup MSYS2 [x86_64]
        if: matrix.arch == '64'
        with:
          MSYSTEM: MINGW${{ matrix.arch }}
          path-type: strict
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-fluidsynth
            mingw-w64-x86_64-ncurses
            mingw-w64-x86_64-SDL_net
            mingw-w64-x86_64-libslirp
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-nasm
            
      # msys2's ffmpeg is broken, build ourselves
      - name: Clone ffmpeg
        uses: actions/checkout@v2
        with:
          repository: FFmpeg/FFmpeg # bleeding edge
          submodules: "recursive"
          ref: ${{ env.ffmpeg-release }}
          path: ffmpeg
      # TODO: consider moving it to the top
      - name: Cache ffmpeg
        id: cache-ffmpeg
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/ffmpeg
          key: msys2-mingw-ffmpeg-${{ env.ffmpeg-release }}
      - name: Build ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/ffmpeg
        run: |
          ./configure --enable-gpl --disable-debug --prefix=/mingw${{ matrix.arch }} --enable-shared
          make -j4
      - name: Install ffmpeg
        working-directory: ${{ github.workspace }}/ffmpeg
        run: make install
        
      - name: Install SDL2 [32]
        if: matrix.arch == '32' && matrix.type == '-sdl2'
        run: pacman --noconfirm --needed -S mingw-w64-i686-SDL2 mingw-w64-i686-SDL2_net
      - name: Install SDL2 [64]
        if: matrix.arch == '64' && matrix.type == '-sdl2'
        run: pacman --noconfirm --needed -S mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_net
        
      - uses: actions/checkout@v2
        name: Checkout repo
        
      - run: perl update-build-timestamp.pl
        name: Update build timestamp
      - name: Build using script
        env:
          EXE_FILE: build-mingw${{ matrix.type }}
        run: |
          chmod +x $EXE_FILE
          ./$EXE_FILE
          
      - name: Pack zip
        run: |
          strip src/dosbox-x.exe
          mkdir -p _build
          cp src/dosbox-x.exe _build/dosbox-x.exe
          cp CHANGELOG _build/CHANGELOG.txt
          cp dosbox-x.reference.conf _build/dosbox-x.reference.conf
          cp dosbox-x.reference.full.conf _build/dosbox-x.reference.full.conf
          
      - name: Upload build as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: mingw-win${{ matrix.arch }}${{ matrix.type }}
          path: _build
          
      - name: Generate zip if invoked by a Release
        if: github.event_name == 'release'
        run: |
          ./vs2015/tool/zip.exe -r -9 build.zip _build
      - name: Upload build to invoking Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} 
          asset_path: ./build.zip
          asset_name: dosbox-x-mingw-win${{ matrix.arch }}${{ matrix.type }}.zip
          asset_content_type: application/zip
  installer: # (Wengier)
    name: Build Inno Setup installer
    runs-on: windows-latest

    needs: [vsbuild, mingw] # sources
    
    env:
      SETUP_DIR: ${{ github.workspace }}\contrib\windows\installer
      ROOT_DIRECTORY: ${{ github.workspace }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download builds
        uses: actions/download-artifact@v2
        
      - name: Prepare directories
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          mkdir Win32_builds
          mkdir Win64_builds
      - name: Prepare directories (VS)
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          $orig_prefix = "$env:ROOT_DIRECTORY\vs-"
          $dest_prefix = "$env:SETUP_DIR\"
          $arch = @("win32","x64","arm","arm64")
          $arch_conv = @("Win32_builds\x86_Release","Win64_builds\x64_Release","Win32_builds\ARM_Release","Win64_builds\ARM64_Release")
          $sub = @("","-sdl2")
          $sub_conv = @("","_SDL2")
          for ($arch_i = 0; $arch_i -lt $arch.count; $arch_i++)
          {
            $orig = $orig_prefix + $arch[$arch_i]
            $dest = $dest_prefix + $arch_conv[$arch_i]
            $_orig = $orig
            $_dest = $dest
            for ($sub_i = 0; $sub_i -lt $sub.count; $sub_i++)
            {
              $orig = $_orig + $sub[$sub_i]
              $dest = $_dest + $sub_conv[$sub_i]
              Write-Host "$orig -> $dest"
              mkdir -Force $dest
              $copy_what = @("dosbox-x.exe", "dosbox-x.reference.conf", "dosbox-x.reference.full.conf")
              foreach ($file in $copy_what)
              {
                copy "$orig\$file" "$dest\$file"
              }
              ./unix2dos.exe $dest\dosbox-x.reference.conf
              ./unix2dos.exe $dest\dosbox-x.reference.full.conf
              if (($arch[$arch_i] -eq "win32") -or ($arch[$arch_i] -eq "x64"))
              {
                ./PatchPE.exe $dest\dosbox-x.exe
              }
            }
          }
      - name: Prepare directories (MinGW)
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          $orig_prefix = "$env:ROOT_DIRECTORY\mingw-"
          $dest_prefix = "$env:SETUP_DIR\"
          $arch = @("win32","win64")
          $arch_conv = @("Win32_builds\mingw","Win64_builds\mingw")
          $sub = @("","-lowend","-sdldraw","-sdl2")
          for ($arch_i = 0; $arch_i -lt $arch.count; $arch_i++)
          {
            $orig = $orig_prefix + $arch[$arch_i]
            $dest = $dest_prefix + $arch_conv[$arch_i]
            $_orig = $orig
            $_dest = $dest
            for ($sub_i = 0; $sub_i -lt $sub.count; $sub_i++)
            {
              $orig = $_orig + $sub[$sub_i]
              $dest = $_dest + $sub[$sub_i]
              Write-Host "$orig -> $dest"
              mkdir -Force $dest
              $copy_what = @("dosbox-x.exe", "dosbox-x.reference.conf", "dosbox-x.reference.full.conf")
              foreach ($file in $copy_what)
              {
                copy "$orig\$file" "$dest\$file"
              }
              ./unix2dos.exe $dest\dosbox-x.reference.conf
              ./unix2dos.exe $dest\dosbox-x.reference.full.conf
            }
          }
      - name: Copy configs
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          copy $env:ROOT_DIRECTORY\dosbox-x.reference.conf dosbox-x.reference.conf
          copy $env:ROOT_DIRECTORY\dosbox-x.reference.full.conf dosbox-x.reference.full.conf
          ./unix2dos.exe dosbox-x.reference.conf
          ./unix2dos.exe dosbox-x.reference.full.conf

      - name: Build installer
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          ./ISCC.exe /F"dosbox-x-windows-setup" DOSBox-X-setup.iss
          ./allusers/ISCC.exe /F"dosbox-x-windows-setup-allusers" allusers/DOSBox-X-setup.iss
        
      - name: Upload installer as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: setup
          path: ${{ env.SETUP_DIR }}\dosbox-x-windows-setup.exe
      - name: Upload Vista-only installer as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: setup
          path: ${{ env.SETUP_DIR }}\dosbox-x-windows-setup-allusers.exe

      - name: Upload setup to invoking Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} 
          asset_path: ${{ env.SETUP_DIR }}\dosbox-x-windows-setup.exe
          asset_name: dosbox-x-windows-setup.exe
          asset_content_type: application/octet-stream
      - name: Upload Vista-only setup to invoking Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} 
          asset_path: ${{ env.SETUP_DIR }}\dosbox-x-windows-setup-allusers.exe
          asset_name: dosbox-x-windows-setup-allusers.exe
          asset_content_type: application/octet-stream
