name: Build for Windows (or HX-DOS Extender)
on: [push, pull_request] # TODO: release [released, prereleased]

jobs:
  vsbuild:
    name: Build with Visual Studio
    runs-on: windows-latest # this image currently has VS2019, but that may change anytime

    strategy:
      matrix:
        arch: [Win32, x64, ARM, ARM64]
        type: [Release, "Release SDL2"]

    steps:
      - uses: actions/checkout@v2
        name: Checkout repo
        
      - run: perl update-build-timestamp.pl
        name: Update build timestamp
        
      - uses: microsoft/setup-msbuild@c26a08ba26249b81327e26f6ef381897b6a8754d # commithash because 1.0.2
        name: Init MSBuild
        
      - name: Cache IPDBs
        uses: actions/cache@v2
        with:
          key: vs-${{ matrix.arch }}-${{ matrix.type }}-buildcache
          path: |
            bin/${{ matrix.arch }}/${{ matrix.type }}/*.exp
            bin/${{ matrix.arch }}/${{ matrix.type }}/*.lib
            bin/${{ matrix.arch }}/${{ matrix.type }}/*.pdb
      - name: Build
        working-directory: vs2015
        env:
          GH_BUILD_TYPE: ${{ matrix.type }}
          GH_BUILD_ARCH: ${{ matrix.arch }}
        run: |
          msbuild dosbox-x.sln /p:Configuration=$env:GH_BUILD_TYPE /p:Platform=$env:GH_BUILD_ARCH
          cd "../bin/${{ matrix.arch }}/${{ matrix.type }}"
          
      - name: Internally decide artifact name
        id: zipname
        env:
          GH_BUILD_TYPE: ${{ matrix.type }}
          GH_BUILD_ARCH: ${{ matrix.arch }}
        run: |
          $zipname = $env:GH_BUILD_ARCH.ToLower()
          if ( $env:GH_BUILD_TYPE -eq "Release SDL2" )
          {
            $zipname = "$zipname-sdl2"
          }
          Write-Host "::set-output name=zipname-sub::$zipname"
          $zip = "dosbox-x-windows-vs-$zipname.zip"
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: vs-${{ steps.zipname.outputs.zipname-sub }}
          path: |
            bin/${{ matrix.arch }}/${{ matrix.type }}
            !bin/${{ matrix.arch }}/${{ matrix.type }}/*.exp
            !bin/${{ matrix.arch }}/${{ matrix.type }}/*.lib
            !bin/${{ matrix.arch }}/${{ matrix.type }}/*.pdb
  mingw:
    name: Build with MSYS2
    runs-on: windows-latest
    
    strategy:
      matrix:
        arch: [32, 64]
        type: ["", -sdl2, -lowend, -sdldraw]
      fail-fast: false
      
    defaults:
      run:
        shell: msys2 {0}
    env:
      ZIP_NAME: dosbox-x-mingw-win${{ matrix.arch }}${{ matrix.type }}.zip
      
    steps:
      - uses: msys2/setup-msys2@v2
        name: Setup MSYS2 [i686]
        if: matrix.arch == '32'
        with:
          MSYSTEM: MINGW${{ matrix.arch }}
          path-type: strict
          install: >-
            base
            base-devel
            libraries
            development
            mingw-w64-i686-toolchain
      - uses: msys2/setup-msys2@v2
        name: Setup MSYS2 [x86_64]
        if: matrix.arch == '64'
        with:
          MSYSTEM: MINGW${{ matrix.arch }}
          path-type: strict
          install: >-
            base
            base-devel
            libraries
            development
            mingw-w64-x86_64-toolchain
        
      - uses: actions/checkout@v2
        name: Checkout repo
        
      - run: perl update-build-timestamp.pl
        name: Update build timestamp
      - name: Build using script
        env:
          EXE_FILE: build-mingw${{ matrix.type }}
        run: |
          chmod +x $EXE_FILE
          ./$EXE_FILE
          
      - name: Pack zip
        run: |
          strip src/dosbox-x.exe
          mkdir -p _build
          cp src/dosbox-x.exe _build/dosbox-x.exe
          cp CHANGELOG _build/CHANGELOG.txt
          cp dosbox-x.reference.conf _build/dosbox-x.reference.conf
          cp dosbox-x.reference.full.conf _build/dosbox-x.reference.full.conf
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: mingw-win${{ matrix.arch }}${{ matrix.type }}
          path: _build
  installer: # (Wengier)
    name: Build Inno Setup installer
    runs-on: windows-latest

    needs: [vsbuild, mingw] # sources
    
    env:
      SETUP_DIR: ${{ github.workspace }}\contrib\windows\installer
      ROOT_DIRECTORY: ${{ github.workspace }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # FIXME: use external build
      - name: Intergrity check
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          if ( -Not (Test-Path "ISCC.exe") )
          {
            Write-Host "::error ::Inno Setup Compiler is not found in $env:SETUP_DIR."
            exit 1
          }
      - name: Download builds
        uses: actions/download-artifact@v2
        
      - name: Prepare directories
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          mkdir Win32_builds
          mkdir Win64_builds
      - name: Prepare directories (VS)
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          $orig_prefix = "$env:ROOT_DIRECTORY\vs-"
          $dest_prefix = "$env:SETUP_DIR\"
          $arch = @("win32","x64","arm","arm64")
          $arch_conv = @("Win32_builds\x86_Release","Win64_builds\x64_Release","Win32_builds\ARM_Release","Win64_builds\ARM64_Release")
          $sub = @("","-sdl2")
          $sub_conv = @("","_SDL2")
          for ($arch_i = 0; $arch_i -lt $arch.count; $arch_i++)
          {
            $orig = $orig_prefix + $arch[$arch_i]
            $dest = $dest_prefix + $arch_conv[$arch_i]
            $_orig = $orig
            $_dest = $dest
            for ($sub_i = 0; $sub_i -lt $sub.count; $sub_i++)
            {
              $orig = $_orig + $sub[$sub_i]
              $dest = $_dest + $sub_conv[$sub_i]
              Write-Host "$orig -> $dest"
              mkdir -Force $dest
              $copy_what = @("dosbox-x.exe", "dosbox-x.reference.conf", "dosbox-x.reference.full.conf")
              foreach ($file in $copy_what)
              {
                copy "$orig\$file" "$dest\$file"
              }
              ./unix2dos.exe $dest\dosbox-x.reference.conf
              ./unix2dos.exe $dest\dosbox-x.reference.full.conf
              if (($arch[$arch_i] -eq "win32") -or ($arch[$arch_i] -eq "x64"))
              {
                ./PatchPE.exe $dest\dosbox-x.exe
              }
            }
          }
      - name: Prepare directories (MinGW)
        working-directory: ${{ env.SETUP_DIR }}
        run: |
          $orig_prefix = "$env:ROOT_DIRECTORY\mingw-"
          $dest_prefix = "$env:SETUP_DIR\"
          $arch = @("win32","win64")
          $arch_conv = @("Win32_builds\mingw","Win64_builds\mingw")
          $sub = @("","-lowend","-sdldraw","-sdl2")
          for ($arch_i = 0; $arch_i -lt $arch.count; $arch_i++)
          {
            $orig = $orig_prefix + $arch[$arch_i]
            $dest = $dest_prefix + $arch_conv[$arch_i]
            $_orig = $orig
            $_dest = $dest
            for ($sub_i = 0; $sub_i -lt $sub.count; $sub_i++)
            {
              $orig = $_orig + $sub[$sub_i]
              $dest = $_dest + $sub[$sub_i]
              Write-Host "$orig -> $dest"
              mkdir -Force $dest
              $copy_what = @("dosbox-x.exe", "dosbox-x.reference.conf", "dosbox-x.reference.full.conf")
              foreach ($file in $copy_what)
              {
                copy "$orig\$file" "$dest\$file"
              }
              ./unix2dos.exe $dest\dosbox-x.reference.conf
              ./unix2dos.exe $dest\dosbox-x.reference.full.conf
            }
          }
      - name: Check strucute
        run: tree ${{ env.SETUP_DIR }}

      - name: Build installer
        working-directory: ${{ env.SETUP_DIR }}
        run: ./ISCC.exe /F"setup.exe" DOSBox-X-setup.iss
      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: setup
          path: ${{ env.SETUP_DIR }}\setup.exe
